// ===================================================================
// Button common properties
// ===================================================================

@mixin btn-common {
    @include border(rgba(0, 0, 0, .13));

    padding: $spacing ($spacing * 1.2);
    border-width: 1px;
    border-style: solid;
    border-radius: $roundness;
    transition: 150ms ease;
    outline-color: transparent;
    font-weight: 700;
    font-size: 1em;

    &:grayed,
    &:disabled,
    &:insensitive {
        color: $insensitive_fg_color;

        StIcon {
            color: $insensitive_fg_color;
        }
    }

    > StIcon {
        width: 16px;
        height: 16px;
        icon-size: 16px;
    }
}

// ===================================================================
// Generate button
//
//  Provide 2 additional parameters to modify
//  focused states(focus, focus:hover, focus:pressed)
//  independently from normal/hover/pressed states
//
//  Additionally, provide $mod:true to instead modify
//  the normal state independently from all other states
//
//  The $bg parameteres modify image URL's
//  Name pattern for button assets:
//      button-{ $bg }.svg
//      button-{ $bg }-hover.svg
//      button-{ $bg }-pressed.svg
// ===================================================================

@mixin btn( $bg, $fg ) {
    // Include common properties
    @include btn-common;
    @include linear-gradient($bg);

    color: $fg;
    box-shadow: 0 1px 2px -1px alpha($dark_shadow, .11);

    &:hover,
    &:focus {
        @include linear-gradient(shade($bg, 1.2));
        @include border(rgba(0, 0, 0, .3));

        box-shadow: 0 1px 2px -1px alpha($dark_shadow, .33);
    }

    &:active,
    &:pressed {
        @include linear-gradient(shade($bg, .7), to top);

        color: $white;
        box-shadow: inset 1px 0 alpha($dark_shadow, .06),
        inset 0 1px alpha($dark_shadow, .07),
        inset -1px 0 alpha($dark_shadow, .06),
        inset 0 -1px alpha($dark_shadow, .05);

        &:focus,
        &:hover {
            @include linear-gradient(shade($bg, .65), to top);
        }
    }
}

// ===================================================================
// Generate StIcon colors FIX
//
// StIcon cannot use transparency in cinnamon,
// and, therefore, cannot use text colors
//
// Use in conjunction with the "btn" mixin
// ===================================================================

@mixin btn-icon-color($icn, $icn-focus:$icn, $mod:false) {
    > StIcon {
        color: $icn;
    }

    &:hover > StIcon,
    &:active > StIcon,
    &:pressed > StIcon {
        color: if($mod, $icn-focus, $icn);
    }

    &:focus > StIcon,
    &:focus:hover > StIcon,
    &:focus:active > StIcon,
    &:focus:pressed > StIcon {
        color: $icn-focus;
    }
}

// ===================================================================
// Standard buttons
// ===================================================================

@mixin btn-primary {
    @include btn($dark_bg_color, $dark_fg_color);
    @include btn-icon-color($dark_fg_color);
}

// ===================================================================
// Standard button widths
// ===================================================================

@mixin btn-width($btn-width) {
    @if $btn-width == "small" {
        padding: .9em;
    }

    @if $btn-width == "wide" {
        padding: .9em 2.2em .9em 2.2em;
        -st-natural-width: 8em;
    }
}
